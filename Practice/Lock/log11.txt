ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|300|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|300|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|300|}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:10000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|350|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|350|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|350|}
File table: 
Heap: {1->190, 2->350, }


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:10000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10000000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000000
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10000000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000000
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000000
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1000000
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:10000000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->19, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100000
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100000
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:10000000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:10000000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:100000000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->300, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:100000000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:100000000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:100000000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {190|305|}
File table: 
Heap: {1->190, 2->305, }


ProgramState with id:1
ExecutionStack: {(Ref(int )v1;(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v1|(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: 
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(Ref(int )v2;(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {Ref(int )v2|(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int x;(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int x|(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(int q;(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {int q|(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v1,20);(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {new(v1,20)|(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(0,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {}


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(new(v2,30);(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {new(v2,30)|(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(0,int ))
Output: {}
File table: 
Heap: {1->20, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(x);(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(x)|(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->0), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))));(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))))|(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(newLock(q);(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))));(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {newLock(q)|(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {fork((lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))))|(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))));(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)*10);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {(lock(x);(WriteHeap(v1,ReadHeap(v1)-1);unlock(x)))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {fork((fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))))|(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)*10);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {(fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))));(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:10
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)*10)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1000
ExecutionStack: {fork((lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))))|(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->20, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)*10);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {(lock(q);(WriteHeap(v2,ReadHeap(v2)+5);unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {lock(x)|(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {(WriteHeap(v1,ReadHeap(v1)-1);unlock(x))|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)*10);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {|(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:100
ExecutionStack: {WriteHeap(v1,ReadHeap(v1)-1)|unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)*10)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->200, 2->30, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {(;(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:100
ExecutionStack: {unlock(x)|}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {lock(q)|(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:100
ExecutionStack: {}
SymbolTable: (q->0), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {|(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {(WriteHeap(v2,ReadHeap(v2)+5);unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:10000
ExecutionStack: {WriteHeap(v2,ReadHeap(v2)+5)|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->300, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(x)|(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:10000
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:10000
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v1))|(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(x)|(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(lock(q);(print(ReadHeap(v2));unlock(q)))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {lock(q)|(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {(print(ReadHeap(v2));unlock(q))|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {print(ReadHeap(v2))|unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|305|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {unlock(q)|}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|305|}
File table: 
Heap: {1->199, 2->305, }


ProgramState with id:1
ExecutionStack: {}
SymbolTable: (q->2), (x->1), (v1->(1,int )), (v2->(2,int ))
Output: {199|305|}
File table: 
Heap: {1->199, 2->305, }


